# Configuration file for Banco Internacional trade data mapping
# Based on banco-internacional-mapping-rules.md

bank_name: "Banco Internacional"
input_format: "CSV"
output_format: "JSON"
date_format: "YYYY-MM-DD"  # Input date format in CSV

# Leg assignment rules - determines which input leg becomes which output leg
leg_assignment:
  # Field that determines leg role (A = bank receives, P = bank pays)
  role_field: "legs[{idx}].leg_generator.rp"
  roles:
    receive: "A"  # Bank receives (counterparty pays) -> output legs[0]
    pay: "P"      # Bank pays (counterparty receives) -> output legs[1]

# Header-level mappings
header_mappings:
  # Basic trade information
  tradeId:
    source_field: "deal_number"

  tradeIdType:
    static_value: "INTERNAL"

  source:
    # This will be populated from command line parameter
    dynamic_value: "source_parameter"

  # Trade date
  tradeDate:
    date:
      source_field: "trade_date.fecha"
      transformation: "date_format"
    businessDayConvention:
      source_field: "legs[{receive_leg_idx}].leg_generator.bus_adj_rule"
      transformation: "business_day_convention"
    businessCenters:
      source_field: "legs[{receive_leg_idx}].leg_generator.settlement_calendar"
      transformation: "business_centers"

  # Effective date (from receive leg)
  effectiveDate:
    date:
      source_field: "legs[{receive_leg_idx}].leg_generator.start_date.fecha"
      transformation: "date_format"
    businessDayConvention:
      source_field: "legs[{receive_leg_idx}].leg_generator.bus_adj_rule"
      transformation: "business_day_convention"
    businessCenters:
      source_field: "legs[{receive_leg_idx}].leg_generator.settlement_calendar"
      transformation: "business_centers"

  # Termination date (from receive leg)
  terminationDate:
    date:
      source_field: "legs[{receive_leg_idx}].leg_generator.end_date.fecha"
      transformation: "date_format"
    businessDayConvention:
      source_field: "legs[{receive_leg_idx}].leg_generator.bus_adj_rule"
      transformation: "business_day_convention"
    businessCenters:
      source_field: "legs[{receive_leg_idx}].leg_generator.settlement_calendar"
      transformation: "business_centers"

  # Parties
  party1:
    partyId:
      static_value: "ThisBank"
    partyName:
      static_value: "Banco Internacional"

  party2:
    partyId:
      static_value: "OurCounterparty"
    partyName:
      source_field: "counterparty.name"

# Leg-level mappings (applied to each leg based on role)
leg_mappings:
  # Note: legId, payerPartyReference, and receiverPartyReference are now hardcoded in mapping_program.py

  # Notional information
  notionalAmount:
    source_field: "legs[{idx}].leg_generator.notional_or_custom.initial_notional"
    transformation: "notional"

  notionalCurrency:
    source_field: "legs[{idx}].leg_generator.notional_currency"

  # Rate information
  rateType:
    source_field: "legs[{idx}].type_of_leg"
    transformation: "rate_type"

  dayCountFraction:
    source_fields:
      primary: "legs[{idx}].leg_generator.coupon_rate_type"
      fallback: "legs[{idx}].leg_generator.interest_rate"
    transformation: "day_count_fraction"

  # Calculation day convention
  calculationDayConvention:
    businessDayConvention:
      source_field: "legs[{idx}].leg_generator.bus_adj_rule"
      transformation: "business_day_convention"
    businessCenters:
      source_field: "legs[{idx}].leg_generator.settlement_calendar"
      transformation: "business_centers"

  # Per-leg effective date
  effectiveDate:
    date:
      source_field: "legs[{idx}].leg_generator.start_date.fecha"
      transformation: "date_format"
    businessDayConvention:
      source_field: "legs[{idx}].leg_generator.bus_adj_rule"
      transformation: "business_day_convention"
    businessCenters:
      source_field: "legs[{idx}].leg_generator.settlement_calendar"
      transformation: "business_centers"

  # Per-leg termination date
  terminationDate:
    date:
      source_field: "legs[{idx}].leg_generator.end_date.fecha"
      transformation: "date_format"
    businessDayConvention:
      source_field: "legs[{idx}].leg_generator.bus_adj_rule"
      transformation: "business_day_convention"
    businessCenters:
      source_field: "legs[{idx}].leg_generator.settlement_calendar"
      transformation: "business_centers"

  # Both frequencies use settlement_periodicity
  calculationPeriodFrequency:
    source_fields:
      years: "legs[{idx}].leg_generator.settlement_periodicity.agnos"
      months: "legs[{idx}].leg_generator.settlement_periodicity.meses"
      days: "legs[{idx}].leg_generator.settlement_periodicity.dias"
      start_date: "legs[{idx}].leg_generator.start_date.fecha"
      end_date: "legs[{idx}].leg_generator.end_date.fecha"
    calculation_type: "period_frequency"

  paymentFrequency:
    source_fields:
      years: "legs[{idx}].leg_generator.settlement_periodicity.agnos"
      months: "legs[{idx}].leg_generator.settlement_periodicity.meses"
      days: "legs[{idx}].leg_generator.settlement_periodicity.dias"
      start_date: "legs[{idx}].leg_generator.start_date.fecha"
      end_date: "legs[{idx}].leg_generator.end_date.fecha"
    calculation_type: "payment_frequency"

  # Payment information
  paymentDateOffset:
    source_field: "legs[{idx}].leg_generator.settlement_lag"
    transformation: "integer"

  paymentDayConvention:
    source_field: "legs[{idx}].leg_generator.sett_lag_behaviour"
    transformation: "business_day_convention"

  paymentBusinessCenters:
    source_field: "legs[{idx}].leg_generator.settlement_calendar"
    transformation: "business_centers"

  # Settlement information
  settlementType:
    source_field: "settlement_mechanism"
    transformation: "settlement_type"

  settlementCurrency:
    source_field: "legs[{idx}].multi_currency.settlement_currency"
    fallback_source: "legs[{idx}].leg_generator.notional_currency"

# Conditional mappings based on leg type
conditional_leg_mappings:
  # Fixed rate legs
  fixed_rate:
    condition: "legs[{idx}].type_of_leg in ['FIXED_RATE_MCCY', 'FIXED_RATE']"
    fields:
      fixedRate:
        source_field: "legs[{idx}].leg_generator.coupon_rate_value"
        transformation: "float"

  # Floating rate legs
  floating_rate:
    condition: "legs[{idx}].type_of_leg in ['OVERNIGHT_INDEX_MCCY', 'OVERNIGHT_INDEX']"
    fields:
      floatingRateIndex:
        source_field: "legs[{idx}].leg_generator.overnight_index_name"
        transformation: "floating_rate_index"

      resetFrequency:
        source_fields:
          years: "legs[{idx}].leg_generator.settlement_periodicity.agnos"
          months: "legs[{idx}].leg_generator.settlement_periodicity.meses"
          days: "legs[{idx}].leg_generator.settlement_periodicity.dias"
          start_date: "legs[{idx}].leg_generator.start_date.fecha"
          end_date: "legs[{idx}].leg_generator.end_date.fecha"
        calculation_type: "period_frequency"

      resetDayConvention:
        source_field: "legs[{idx}].leg_generator.fix_adj_rule"
        transformation: "business_day_convention"

      resetBusinessCenters:
        source_field: "legs[{idx}].leg_generator.fixing_calendar"
        transformation: "business_centers"

      rateRoundingPrecision:
        source_field: "legs[{idx}].leg_generator.eq_rate_decimal_places"
        transformation: "integer"

      rateRoundingDirection:
        static_value: "NEAREST"

      spread:
        source_field: "legs[{idx}].leg_generator.spread"
        transformation: "float"

  # Multi-currency (FX) legs
  fx_fixing:
    condition: "legs[{idx}].multi_currency.fx_rate_index_name is not empty"
    fields:
      fxFixing:
        fxFixingReference:
          source_field: "legs[{idx}].multi_currency.fx_rate_index_name"
          transformation: "fx_rate_index"
        fxFixingOffset:
          source_field: "legs[{idx}].multi_currency.fx_fixing_lag"
          transformation: "fx_fixing_lag"
        fxFixingDayType:
          static_value: "BUSINESS"
        dateRelativeTo:
          source_field: "legs[{idx}].multi_currency.fx_fixing_lag_pivot"
          transformation: "fx_fixing_pivot"
        fxFixingDayConvention:
          static_value: "PRECEDING"
        fxFixingBusinessCenters:
          reference_field: "calculationDayConvention.businessCenters"

# Value transformation mappings
transformations:
  # Business center mappings
  business_centers:
    "NY": ["USNY"]
    "SCL": ["CLSA"]
    "LON": ["GBLO"]
    "NY-SCL": ["USNY", "CLSA"]
    "LON-SCL": ["GBLO", "CLSA"]
    "NY-LON-SCL": ["USNY", "GBLO", "CLSA"]

  # Business day convention mappings
  business_day_convention:
    "MOD_FOLLOW": "MODFOLLOWING"
    "FOLLOW": "FOLLOWING"
    "DONT_MOVE": "NONE"

  # Rate type mappings
  rate_type:
    "FIXED_RATE_MCCY": "FIXED"
    "FIXED_RATE": "FIXED"
    "OVERNIGHT_INDEX_MCCY": "FLOATING"
    "OVERNIGHT_INDEX": "FLOATING"

  # Day count fraction mappings
  day_count_fraction:
    "LIN_ACT/360": "ACT/360"

  # Floating rate index mappings
  floating_rate_index:
    "ICPCLP": "CLP-ICP"

  # Settlement type mappings
  settlement_type:
    "C": "CASH"
    "E": "PHYSICAL"

  # FX rate index mappings
  fx_rate_index:
    "USDOBS": "CLP_DOLAR_OBS_CLP10"

  # FX fixing lag mappings
  fx_fixing_lag:
    "1": -2

  # FX fixing pivot mappings
  fx_fixing_pivot:
    "SETTLEMENT_DATE": "PAYMENT_DATES"

# Period calculation rules
period_calculation_rules:
  zero_coupon_threshold: 25  # Years - if >= this, set as "TERM"
  payment_frequency_term_value: "ATMATURITY"  # Special value for payment frequency when TERM

# Fields to ignore (not mapped to output)
ignored_fields:
  - "_id"
  - "counterparty.rut.rut"
  - "counterparty.rut.dv"
  - "counterparty.other"
  - "portfolio"
  - "hedge_accounting"
  - "product"
  - "currency_pair"
  - "price"
  - "other.regulatory_portfolio"
  - "legs[*].leg_number"
  - "legs[*].leg_generator.settlement_stub_period"
  - "legs[*].leg_generator.type_of_amortization"
  - "legs[*].leg_generator.amort_is_cashflow"
  - "legs[*].leg_generator.is_bond"
  - "legs[*].leg_generator.gearing"
  - "legs[*].leg_generator.dates_for_eq_rate"
  - "legs[*].multi_currency.fx_fixing_lag_applies_to"